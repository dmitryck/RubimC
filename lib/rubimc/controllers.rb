# ToDo: replace Controllers to MCUs
class Controllers
	def self.all # list of USER`s microcontrolles
		@@controllers_array
	end

	@@controllers_array = []
	def self.inherited(child_class) # hook when define class
		@@controllers_array << child_class if child_class.is_real_controller?
	end

	def self.is_real_controller?
		false
	end

	def self.print_cc_layout(position)
		return if RubimCode::Printer.sandbox == true # don`t print output in sandbox
		h_name = File.basename(ARGV[0], '.c') + '.h'
		if position == :before_main
			RubimCode.pout "/**************************************************************"
			RubimCode.pout " * This code was generated by RubimC micro-framework"
			RubimCode.pout " * RubimC version: #{RubimCode::VERSION}"
			RubimCode.pout " * RubimC author: Evgeny Danilov"
			RubimCode.pout " * File created at #{Time.now}"
			RubimCode.pout " **************************************************************/"
			RubimCode.pout
			RubimCode.pout "#include <stdbool.h>"
			RubimCode.pout "#include <stdio.h>"
			RubimCode.pout "#include \"#{h_name}\""
			RubimCode.pout
			yield if block_given? # print micro_layout
			RubimCode.pout
			RubimCode.pout
			RubimCode.pout "int main(int argc, char *argv[]) {"
			RubimCode.level += 1
		else
			RubimCode.pout
			RubimCode.pout "return 1;"
			RubimCode.level -= 1
			RubimCode.pout "}"
		end
	end

	def self.find_mcu(name)
		series_array = Controllers.descendants
		real_mcu_array = []
		series_array.each {|series| real_mcu_array += series.descendants}
		return real_mcu_array.select {|mcu| mcu.is_real_controller? and mcu::MCU_NAME == name}
	end
end

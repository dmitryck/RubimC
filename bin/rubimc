#!/usr/bin/env ruby

# Example:
#
#   rubimc generate mcu "Brain.rb" type:attiny13
#   rubimc g mcu FirstProg
#   rubimc g clearC Example
# 
#   rubimc compile "BrainControll.rb"
#   rubimc compile BrainControll
#   rubimc compile --all
# 

require 'rake' 

gem_dir = File.expand_path("..", File.dirname(__FILE__))
$LOAD_PATH.unshift gem_dir # Look in gem directory for resources first

exec_type = ARGV[0]
if exec_type == 'generate' or exec_type == 'g'
	gen_type = ARGV[1]
	if gen_type == 'mcu' # generate template for MCU
		name = ARGV[2]
		if name.nil?
			puts "ERROR: you must define mcu name"
			puts "for example: 'rubimc g mcu ExampleProg'"
			exit 1
		end

		parent = "Unknown_MCU"
		type_param = ARGV[3] # ToDo: parse params
		unless type_param.nil?
			require 'rubimc'
			RubimCode::Printer.sandbox = true

			type_param = type_param.gsub(/type:/, "")
			mcu = Controllers.find_mcu("#{type_param}").first
			if mcu.nil?
				puts "ERROR: mcu type '#{type_param}'' not found in rubimc libraries"
				exit 1
			end
			series, type = mcu::MCU_SERIES, mcu::MCU_NAME
			parent = "#{series}_#{type}"
		end

		generated_text = "
			require 'rubimc'

			class #{name} < #{parent}
				def initialize
				end

				def main_loop # infinit loop, it stop only when IC is reset
				end
			end"

	elsif gen_type == 'clearC' # generate template for clear C code
		name = ARGV[2]
		if name.nil?
			puts "ERROR: you must define file name"
			puts "for example: 'rubimc g clearC ExampleProg'"
			exit 1
		end

		generated_text = "
			require 'rubimc'

			def main(argv)
			end"
	else
		puts "ERROR: unknown param '#{gen_type}'"
		puts "Available params for generator: mcu; clearC"
		exit 1
	end

	generated_text.gsub!(/\t\t\t/, "")
	generated_text = generated_text[1..-1]
	if File.exist?("#{name}.rb")
		puts "WARNING: file '#{name}.rb' already exist. Overrire it (y/n)?"
		answer = STDIN.gets
		exit 1 if ["n\n", "N\n"].include? answer
	end
	File.open("#{name}.rb", 'w') {|file| file.puts(generated_text) }
	# => end generate section

elsif exec_type == 'compile'

	puts "\n === Run RubimC compiler === "

	input_files = []
	if ARGV[1] == '-all' or ARGV[1] == '--all'
		Dir['*.rb'].each do |file|
			input_files << file
		end
	else
		ARGV[1] += '.rb' if File.extname(ARGV[1]).empty?
		input_files << ARGV[1]
	end
	ARGV.clear

	unless input_files.any?
		puts 'No files to compile...'
		exit 1
	end

	need_to_clear_release = true
	input_files.each do |input_file|
		# === check file exist ===
		unless File.exist?(input_file)
		 	puts "ERROR: File \"#{input_file}\" not found"
		 	puts "Use 'rubimc compile --all' to compile all files in current directory"
		 	puts ""
		 	exit 1
		end

		# === prepare file names ===
		input_file = File.expand_path(input_file)
		basename = File.basename(input_file, ".rb") # extract filename without path and extention 
		dirname = File.dirname(input_file)
		release_folder = "#{dirname}/release/"
		outfile = "#{dirname}/release/#{basename}"

		# === clear directory "release" ===
		if need_to_clear_release
			need_to_clear_release = false
			FileUtils.rm_rf(Dir.glob("#{release_folder}/*"))
		end
		Dir.mkdir("#{release_folder}/") unless Dir.exists?("#{release_folder}/")

		# === preprocessing user`s program ===
		print "preprocessing file \"#{basename}.rb\"..."
		require 'rubimc/preprocessor'
		PreProcessor.write_in_file(input_file, dirname, basename, "#{outfile}.rb")

		# === check type: gcc/avr-gcc
		require "#{outfile}.rb"
		unless defined? RubimCode
			puts "ERROR: file '#{outfile}.rb' is not rubimc program"
			exit 1
		end
		RubimCode::Printer.sandbox = true
		RubimCode::Printer.generate_cc
		code_type = RubimCode::Printer.code_type
		mcu_type = RubimCode::Printer.mcu_type

		# === execute preprocessing program, generate C code ===
		puts "generate C code"
		sh "ruby '#{outfile}.rb' '#{outfile}'.c", verbose: false do |ok, res|
			exit 1 unless ok # check exit status after command runs
		end

		# === compile C code to object-code and link to hex/exe ===
		# ToDo: add DF_CPU (is it need?)
		if code_type == "avr-gcc"
			print "compile and link..."
			sh "avr-gcc -std=c99 -Os -mmcu=#{mcu_type} -c '#{outfile}.c' -o '#{outfile}.o'", verbose: false do |ok, res|
				exit 1 unless ok # check exit status after command runs
			end
			# generate hex for upload to MCU
			sh "avr-objcopy -O ihex '#{outfile}.o' '#{outfile}.hex'", verbose: false do |ok, res|
				exit 1 unless ok # check exit status after command runs
			end
			puts "done"

		elsif code_type == "gcc"
			print "compile and link..."
			sh "gcc  -std=c99 -o '#{outfile}.out' '#{outfile}.c'", verbose: false do |ok, res|
				exit 1 unless ok # check exit status after command runs
			end
			puts "done"

			print "run..."
			sh "'#{outfile}.out'", verbose: false do |ok, res|
				exit 1 unless ok # check exit status after command runs
			end
		end
	end

else
	puts "ERROR: unknown command for rubimc"
	puts "Available commands: compile; generate;"
	exit 1
end
